library(rscripting)
library(sinkrtools)


DEVMODE <- interactive()
if (DEVMODE){
    args <- strsplit("/usr/lib64/R/bin/exec/R --slave --no-restore --vanilla --file=/opt/code/R/sinkrtools/inst/scripts/dineof_matlab.Rscript --args --inputfile MODIS_2003-2015_lme08_dintest.mat --inputvar allCHL --maskfile mask_LME08.mat --maskvar nans", " ", fixed = TRUE)[[1]]
} else {
    args <- commandArgs(trailingOnly = FALSE)
}

ARGS <- CommandArgs(args)
ARGS$add_argument("inputfile", 
    help = "input matlab filename", 
    required = TRUE)
ARGS$add_argument("inputvar", 
    help = "name of the item in the input matlab file",
    default = "first")
ARGS$add_argument("maskfile",
    help = "input matlab mask filename",
    default = "")
ARGS$add_argument("maskvar", 
    help = "name of the item in the input matlab mask file",
    default = "first")
ARGS$add_argument("n_cores", 
    help = "the number of cores for parallel processing, default = 1",
    type = 'numeric',
    default = 1)
ARGS$add_argument("step",
    help = "if n_cores > 1 then divide into steps this big",
    type = 'numeric',
    default = 360)
ARGS$add_argument("output",
    help = "filename for output matlab file",
    default = "dineof.mat")
ARGS$parse_arguments()

#ARGS$show()


inputfile <- ARGS$get("inputfile")
inputvar <- ARGS$get("inputvar")
if (inputvar == "first") inputvar <- 1

x <- sinkrtools::read_matlab(inputfile, elem = inputvar)
if (is.null(x)){
    cat("error reading input file:", inputfile, "\n")
    quit(status = 1, save = 'no')
}

maskfile <- ARGS$get("maskfile")
if (nchar(maskfile) > 0){
    maskvar <- ARGS$get("maskvar")
    if (maskvar == 'first') maskvar <- 1
    mask <- sinkrtools::read_matlab(maskfile, elem = maskvar)
    if (is.null(mask)){
        cat("error reading mask file:", maskfile, "\n")
        quit(status = 1, save = 'no')
    }
    if (all(is.na(as.vector(mask)))){
        cat("the mask is everywhere NaN - please check maskfile:",
            maskfile, "\n")
        quit(status = 1, save = 'no')
    }       
} else {
    mask <- NULL
}

n_cores <- ARGS$get("n_cores")
if (n_cores > 1){
    max_cores <- parallel::detectCores()
    if (n_cores > max_cores) stop("n_cores must be <= number of cores")
    step <- ARGS$get("step")
}


y <- sinkrtools::dineof_array(x, mask = mask, step = step, n_cores = n_cores)

output <- ARGS$get("output")
sinkrtools::writeMat(y, output)

quit(save = "no", status = 0)
