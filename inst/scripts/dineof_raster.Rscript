library(rscripting)
library(sinkrtools)
library(raster)

# Rscript --vanilla /opt/code/R/sinkrtools/inst/scripts/dineof_raster.Rscript --inputfile /opt/projects/dineof/NA_MODISA_45km_chlor_a.grd --inputlog"

DEVMODE <- interactive()
if (DEVMODE){
    args <- strsplit("/usr/lib64/R/bin/exec/R --slave --no-restore --vanilla --file=/opt/code/R/sinkrtools/inst/scripts/dineof_raster.Rscript --args --inputfile /opt/projects/dineof/NA_MODISA_45km_chlor_a.grd --inputlog", " ", fixed = TRUE)[[1]]
} else {
    args <- commandArgs(trailingOnly = FALSE)
}

ARGS <- CommandArgs(args)
ARGS$add_argument("inputfile", 
    help = "input raster filename", 
    required = TRUE)
ARGS$add_argument("inputlog",
    help = "logical, if present then log10 scale the input before processing and antilog before saving",
    type = 'set_true',
    default = FALSE)
ARGS$add_argument("maskfile",
    help = "input raster mask filename",
    default = "")
ARGS$add_argument("n_cores", 
    help = "the number of cores for parallel processing, default = 1",
    type = 'numeric',
    default = 1)
ARGS$add_argument("step",
    help = "if n_cores > 1 then divide into steps this big",
    type = 'numeric',
    default = 360)
ARGS$add_argument("output",
    help = "filename for output raster file",
    default = "dineof.grd")
ARGS$parse_arguments()

#ARGS$show()


inputfile <- ARGS$get("inputfile")
inputlog <- ARGS$get("inputlog")

R <- try(raster::brick(inputfile))
if (inherits(R, 'try-error')){
    cat("error reading input file:", inputfile, "\n")
    quit(status = 1, save = 'no')
}
x <- as.array(R)
if (inputlog) x <- log10(x)

maskfile <- ARGS$get("maskfile")
if (nchar(maskfile) > 0){
    mask <- try(raster::raster(maskfile))
    if (inherits(mask, 'try-error')){
        cat("error reading mask file:", maskfile, "\n")
        quit(status = 1, save = 'no')
    }
    if (all(is.na(as.vector(mask)))){
        cat("the mask is everywhere NaN - please check maskfile:",
            maskfile, "\n")
        quit(status = 1, save = 'no')
    }
    mask <- as.array(mask)
    # in case mask is a layer [nx,ny,nz] we take just the first layer
    if (length(dim(mask)) > 2) mask <- mask[,,1]
    if (!identical(dim(mask), dim(x)[1:2])){
        cat("the mask dims do not match the input file dims\n")
        quit(status = 1, save = 'no')
    }        
} else {
    mask <- NULL
}

n_cores <- ARGS$get("n_cores")
if (n_cores > 1){
    max_cores <- parallel::detectCores()
    if (n_cores > max_cores) stop("n_cores must be <= number of cores")
    stepsize <- 1
} else {
    stepsize <- ARGS$get("step")
}

y <- sinkrtools::dineof_array(x, mask = mask, step = stepsize, n_cores = n_cores)

if (inputlog) y <- 10^y

R <- raster::setValues(R, y)

output <- ARGS$get("output")
raster::writeRaster(R, output, overwrite = TRUE, format = 'raster')

quit(save = "no", status = 0)
